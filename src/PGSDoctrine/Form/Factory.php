<?php
/**
 * Created by PhpStorm.
 * User: sokool
 * Date: 21/01/14
 * Time: 14:17
 */

namespace PGSDoctrine\Form;

use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\Common\Util\Debug;
use DoctrineModule\Persistence\ObjectManagerAwareInterface;
use Zend\Form\Exception;
use Zend\Form\Factory as ZendFormFactory;
use Zend\Form\FieldsetInterface;
use Zend\Stdlib\Hydrator;

class Factory extends ZendFormFactory implements ObjectManagerAwareInterface
{
    protected $entityManager;

    protected function prepareAndInjectHydrator($hydratorOrName, FieldsetInterface $fieldset, $method)
    {
        if (is_array($hydratorOrName) && array_key_exists('target_class', $hydratorOrName)) {
            if (class_exists($hydratorOrName['type'])) {
                $fieldset->setHydrator(new $hydratorOrName['type']($this->entityManager, $hydratorOrName['target_class']));

                return;
            }
        }

        return parent::prepareAndInjectHydrator($hydratorOrName, $fieldset, $method); // TODO: Change the autogenerated stub
    }

    /**
     * Set the object manager
     *
     * @param ObjectManager $objectManager
     */
    public function setObjectManager(ObjectManager $objectManager)
    {
        $this->entityManager = $objectManager;

        return $this;
    }

    /**
     * Get the object manager
     *
     * @return ObjectManager
     */
    public function getObjectManager()
    {
        return $this->entityManager;
    }


}
